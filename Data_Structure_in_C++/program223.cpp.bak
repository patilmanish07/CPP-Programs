// Singly linkedlist in a  generic way.
#include<iostream>
using namespace std;

template<class T>
struct node
{
	T data;
	struct node *next;
}; 

template<class T>
class SinglyLL
{
	public:
	     struct node<T> *Head;
          int Count;

        SinglyLL();
		void InsertFirst(T);
		void InsertLast(T);
		void InsertAtPosition(int,T);
		void Display();
		int CountNode();
		void DeleteFirst();
		void DeleteAtPosition(int);
		void DeleteLast();
		
};

template<class T>
SinglyLL<T>::SinglyLL()
{
	Head = NULL;
	Count = 0;
}

template<class T>
void SinglyLL<T>::InsertFirst(T no)
{
	struct node<T> *newn = NULL;
	newn = new node<T>;
	
	newn->data = no;
	newn->next = NULL;
	
	if(Head == NULL)
	{
		Head = newn;
	}
	else
	{
		newn-> next = Head;
		Head = newn;
	}
    Count++;	
}

template<class T>
void SinglyLL<T>::InsertLast(T no)
{
	struct node<T> *newn = NULL;
	newn = new node<T>;
	
	newn->data = no;
	newn->next = NULL;
	
	if(Head == NULL)
	{
		Head = newn;
	}
	else
	{
	      struct node<T>*temp = Head;
		  while(temp->next != NULL)
		  {
			  temp = temp-> next;
		  }
		  
		  temp->next= newn;
	}
    Count++;	
}

template<class T>
void SinglyLL<T>::InsertAtPosition(int pos,T no)
{
	if((Head == NULL) || (pos > CountNode()+1) ||(pos <= 0))
	{
		cout<<"Position is invalid"<<endl;
	}
	
	if(pos == 1)
	{
	    (InsertFirst(no));
	}
	else if(pos == (CountNode()+1))
	{
	   (InsertLast(no));
	}
	else
	{
		struct node<T> *newn = NULL;
    	newn = new node<T>; 
		
		if(newn == NULL)
		{
			return;
		}
		
		newn->next = NULL;
		newn->data = no;
		
		struct node<T>*temp = Head;
		for(int i = 1; i <=(pos-2);i++)
		{
			temp = temp->next;
		}
          temp->next =temp->next;
		  temp->next= newn;	
	}
	Count++; 
}


template<class T>
void SinglyLL<T>::Display()
{
	cout<<"Elements from Linked List are :"<<endl;
	struct node<T> *temp = Head;
	while(temp != NULL)
	{
		cout<<temp->data<<" ";
		temp = temp->next;
	}
	cout<<endl;
}

template<class T>
int SinglyLL<T>::CountNode()
{
	return Count;
}

template<class T>
void SinglyLL<T>::DeleteFirst()
{
	struct node<T> *newn = NULL;
    newn = new node<T>; 
	
	if(Head == NULL)
	{
		return; 
	}
	else
	{
		struct node<T>*temp = Head;
		Head = Head->next;
		free(temp);
	}
	Count--;
}

template<class T>
void SinglyLL<T>::DeleteLast()
{
	  if(Head == NULL)
	{
		return;
	}	
	else if(Head->next == NULL)
	{
		delete Head;
		Head = NULL;
	}
    else
	{
	    *temp1 = Head, temp2 = NULL;
		
		while(temp1 ->next ->next != NULL)
		{
			temp1 = temp1 -> next;
		}
		
		temp2 = temp1 -> next;
		temp1 -> next = NULL;
	}
	Count--;
}

template<class T>
void SinglyLL<T>::DeleteAtPosition(int pos)
{
	
	if((Head == NULL) || (pos > CountNode()) || (pos <= 0))
	{
		return;
	}
    else if(pos == 1)
    {
		DeleteFirst();
	}  
	else if(pos == (CountNode()))
    {
		DeleteLast();
	}
	 else
    {
		struct node<T> *temp1 = Head,
	    temp2 = NULL;
		
		for(int i = 1; i<= (pos-2); i++)
		{
			temp1 = temp1 -> next;
			i++;
		}
		
		temp2 = temp1 -> next;
		temp1 ->next = temp2-> next;
		
	   delete temp2;
	}
	Count--;
}

int main()
{
	SinglyLL <int>obj1;
	SinglyLL <float>obj2;
	
	obj1.InsertFirst(21);
	obj1.InsertFirst(11);
	obj1.InsertFirst(1);
	obj1.InsertAtPosition(31,3);
	obj1.DeleteAtPosition(31);
	obj1.InsertLast(51);
	obj1.DeleteFirst();
	obj1.DeleteLast();
	obj1.Display();
	cout<<"Number of nodes are :"<<obj1.CountNode()<<endl;
	
	return 0;
} 



/*
obj2.InsertFirst(21.11);
	obj2.InsertFirst(11.11);
	obj2.InsertLast(51.11);
	obj2.InsertLast(101.11);
    obj2.Display();
	cout<<"Number of nodes are :"<<obj2.CountNode()<<endl;
*/	